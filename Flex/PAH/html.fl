
%option noyywrap 
%option stack

%{
	#include <stdlib.h>
	#include <string.h>
	#include <stdio.h>
	#include "LinkedList/linkedlist.h"
	#include "functionsHtml.h"
	#include "utilities.h"

	#define DIM_LINE	100

	void generateOutput();

	LinkedList closeTags ;
	LinkedList indexHtml ;
	LinkedList title ;
	LinkedList header ;
	
	int nImg = 1,
		titleLevel ;
	int sect = 0, subSect = 0, subSubSect = 0;
	int printIndex = 0 ;
	int newLineEnable = 0 ;
	int lastWasNewLine = 0 ;

	FILE *tempFile ;
	FILE *output ;	

	char *tempFileName = ".temp.pah" ;
	char *newLine = "\n" ;
%}

	/* ------------------------------------ ESTADOS -------------------------------------------- */

%s NO_ENV 
%s LIST 
%s DICT 
%s DICT_TIT 
%s IMG 
%s LINK
%s TABLE
%s TITLE
%s HEADER

%%

	/* ----------------------------------- VARIÁVEIS ------------------------------------------------- */
			int openItem = 0,
				itemTitleTags = 0,
				openLine = 0,
				columnType ; // 0 -> header, 1 -> normal
				

	/* ------------------------------------ ESTADO INICIAL ------------------------------------------ */

			BEGIN NO_ENV ;
	
	/* -------------------------------- PROTECÇÃO DAS CHAVETAS	------------------------------------- */

\\\{			{	fprintf(tempFile, "{") ;}
\\\}			{ 	fprintf(tempFile, "}") ;}
\\\%			{	char a[2] = "%" ;
					fprintf(tempFile, "%s", a) ;}

	/* ------ NEGRITO, ITÁLICO E SUBLINHADO EM AMBIENTES ESPECIAIS (QUE TERMINAM COM '}') ------- */

<DICT_TIT,IMG,LINK,TITLE>%b\{ 		{ 	beginBoldHtml();
										itemTitleTags ++ ; }
<DICT_TIT,IMG,LINK,TITLE>%i\{		{ 	beginItalicHtml(); 
										itemTitleTags ++ ; }
<DICT_TIT,IMG,LINK,TITLE>%u\{		{ 	beginUnderlineHtml();
										itemTitleTags ++ ; }

	/* ------ NEGRITO, ITÁLICO E SUBLINHADO EM AMBIENTE HEADER ----------------------------------- */

<HEADER>%b\{ 						{ 	beginHeaderBoldHtml();		}										
<HEADER>%i\{						{ 	beginHeaderItalicHtml(); 	}
<HEADER>%u\{						{ 	beginHeaderUnderlineHtml();		}										

	/* ------------------------ NEGRITO, ITÁLICO E SUBLINHADO ----------------------------- */

%b\{				{ 	beginBoldHtml();	}
%i\{				{ 	beginItalicHtml(); 	}
%u\{				{ 	beginUnderlineHtml(); }

	/* ------------------------- COMENTÁRIO DE LINHA -------------------------------------- */

\%\%\%[^\n]* 		{	addCommentHtml(yytext+3);	}

	/* -------------------------- INÍCIO DE LISTAS ----------------------------------------- */

<NO_ENV>%%dl%		{ 	yy_push_state(DICT)	;
						beginDictionaryHtml(); 	}

<NO_ENV>%%ol%		{ 	yy_push_state(LIST) ;
					  	beginOrderListHtml(); 	}	

<NO_ENV>%%ul%		{ 	yy_push_state(LIST) ;
					  	beginUnorderListHtml(); 	}	

	/* -------------------------- INÍCIO DE LISTAS DENTRO DE LISTAS ----------------------------------------- */

<LIST,DICT>%%ol%	{	if(openItem == 1) {
							endTagHtml() ;
							openItem = 0 ;
						}
						yy_push_state(LIST) ;
						beginOrderListHtml();	}

<LIST,DICT>%%ul%	{	if(openItem == 1) {
							endTagHtml() ;
							openItem = 0 ;
						}
						yy_push_state(LIST) ;
						beginUnorderListHtml();	}	

<LIST,DICT>%%dl%	{	if(openItem == 1) {
							endTagHtml() ;
							openItem = 0 ;
						}
						yy_push_state(DICT) ;
						beginDictionaryHtml();	}											

	/* -------------------------- FIM DE LISTAS ------------------------------------------- */

<DICT>%dl%%			{ 	if(openItem == 1) {
							endTagHtml() ;
							openItem = 0 ;
						}
						int stateL = yy_top_state() ;
						yy_pop_state() ;					  	
					  	endTagHtml();
					  	if(stateL == NO_ENV)
					  		newLineEnable = 0 ; 	}	

<LIST>%ol%%    		{ 	if(openItem == 1) {
							endTagHtml() ;
							openItem = 0 ;
						}						
						int stateL = yy_top_state() ;
						yy_pop_state() ;					  	
					  	endTagHtml();
					  	if(stateL == NO_ENV)
					  		newLineEnable = 0 ; 	}					  					  



<LIST>%ul%%    		{ 	if(openItem == 1) {
							openItem = 0 ;
							endTagHtml() ;
						}
						int stateL = yy_top_state() ;
						yy_pop_state() ;					  	
					  	endTagHtml();
					  	if(stateL == NO_ENV)
					  		newLineEnable = 0 ;  	}					  					  						

	/* ---------------------- ITEMS DE UM DICIONÁRIO --------------------- */

<DICT>%it\{			{	if(openItem == 1) 
							endTagHtml() ;
						else
							openItem = 1 ;
						beginDictionaryTitleHtml() ;	
						BEGIN DICT_TIT ;	}

<DICT_TIT>\}			{ 	endTagHtml() ;							
							if(itemTitleTags == 0) {
								beginDictionaryItemHtml();	
								BEGIN DICT;	
							}
							else
								itemTitleTags -- ;
						}						

	/* ---------------------- ITEMS DE UMA LISTA --------------------- */

<LIST>%it  			{	if(openItem == 1)
							endTagHtml() ;
					  	else
					  		openItem = 1 ;					
					  	beginItemHtml(); 	}


	/* ---------------------- INICIAR TÍTULO ------------------------------------ */

<NO_ENV>%t[1-3]\{	{ 	char* str = substring(yytext, 2, 1);    /* Tag de início de título */
					  	titleLevel = atoi(str) ;					  	
              			beginTitleHtml();
              			free(str);
              			BEGIN TITLE; }

	/* ------------------------ FIM DE TÍTULO --------------------------------- */

<TITLE>\}			{ 		endTagHtml() ;							
							if(itemTitleTags == 0) {								
								BEGIN NO_ENV;
								newLineEnable = 0 ;
								endTagHtml();	
								closeTitleHtml() ;
							}
							else
								itemTitleTags -- ;	}    

	/* ------------------------ REGISTAR TÍTULO --------------------------------- */

<TITLE>.			{	char *txt = substring(yytext, 0, 1) ;
						tailInsertLinkedList(title, txt);
						fprintf(tempFile, "%s", yytext) ;	}	

	/* ------------------------ REGISTAR MUDANÇA DE LINHA NO TÍTULO --------------------------------- */

<TITLE>\n			{	fprintf(tempFile, "<br>") ;	}													


	/* ---------------------- INÍCIO DE LINK E IMAGEM --------------------- */	              			


<NO_ENV,LIST,DICT,TABLE>%img\{	{	//BEGIN IMG;
								yy_push_state(IMG) ;
								beginImageHtml() ;	} 

<NO_ENV,LIST,DICT,TABLE>%link\{	{	//BEGIN LINK ;
								yy_push_state(LINK) ;
								beginLinkHtml();	}					

	/* ------------------------ FIM DE LINK --------------------------------- */

<IMG>\}				{ 	endTagHtml() ;							
						if(itemTitleTags == 0) {	
							nImg ++ ;						
							//BEGIN NO_ENV;
							int topState = yy_top_state() ;
							yy_pop_state() ;
							if(topState == NO_ENV)
								newLineEnable = 0 ;	
						}
						else
							itemTitleTags -- ;	}

	/* ------------------------ FIM DE IMAGEM --------------------------------- */

<LINK>\}			{ 		endTagHtml() ;							
							if(itemTitleTags == 0) {								
								//BEGIN NO_ENV;
								//newLineEnable = 1 ;	
								//lastWasNewLine = 0 ;
								int topState = yy_top_state() ;
								yy_pop_state() ;
								if(topState == NO_ENV) {
									newLineEnable = 1 ;	
									lastWasNewLine = 0 ;
								}
							}
							else
								itemTitleTags -- ;	}


	/* ------------------------ LEGENDA DA IMAGEM E TEXTO DO LINK ---------------------------------- */

<IMG>,				{	beginCaptionHtml(); }	


<LINK>,				{	beginLinkTextHtml(); }	

	/* ------------------------ FIM DE TAG NO CABEÇALHO ----------------------------------------------------------- */

<HEADER>\}					{ endHeaderTag(); }

	/* ------------------------ FIM DE TAG ----------------------------------------------------------- */

\}					{ endTagHtml(); }

	/* ------------------------ COMENTÁRIO MULTI-LINHA ----------------------------------------------- */

\%\%comment%([^%]|%[^c]|%c[^o]|%co[^m]|%com[^m]|%comm[^e]|%comme[^n]|%commen[^t]|%comment[^%]|%comment%[^%])*%comment%% 	{	
				char *txt = substring(yytext, 10, strlen(yytext)-20) ;
				addCommentHtml(txt);
				free(txt) ;	}

	/* ------------------------ VERBATIM DE LINHA ---------------------------------------------------- */				

\%\%verb%([^%]|%[^v]|%v[^e]|%ve[^r]|%ver[^b]|%verb[^%]|%verb%[^%])*%verb%% {				
				char *txt = substring(yytext, 7, strlen(yytext)-14) ;				
				addVerbatimLineHtml(txt);
				free(txt) ;	}

	/* ------------------------ VERBATIM MULTI-LINHA ------------------------------------------------- */				

\%\%verbatim%([^%]|%[^v]|%v[^e]|%ve[^r]|%ver[^b]|%verb[^a]|%verba[^t]|%verbat[^i]|%verbati[^m]|%verbatim[^%]|%verbatim%[^%])*%verbatim%% {
				char *txt = substring(yytext, 11, strlen(yytext)-22) ;
				addVerbatimHtml(txt);
				free(txt) ;	}	

	/* ------------------------ CÓDIGO HTML E LATEX ---------------------------------------------------------- */				

\%\%html%([^%]|%[^h]|%h[^t]|%ht[^m]|%htm[^l]|%html[^%]|%html%[^%])*%html%% 	{				
				char *txt = substring(yytext, 7, strlen(yytext)-14) ;
				addCodeHtml(txt) ;
				free(txt) ;	}	

\%\%latex%([^%]|%[^l]|%l[^a]|%la[^t]|%lat[^e]|%late[^x]|%latex[^%]|%latex%[^%])*%latex%%   { }				


	/* ------------------------------ INICIAR TABELA ---------------------------------------------------------- */

<NO_ENV>%%table%		{	BEGIN TABLE;
							fprintf(tempFile, "<table border=\"1\">") ;	}

	/* ------------------------------ INICIAR LINHA DA TABELA ---------------------------------------------------------- */

<TABLE>%head 			{	if(openLine == 1) {
								(columnType == 0 ? fprintf(tempFile, "</th>\n") : fprintf(tempFile, "</td>\n")) ;
								fprintf(tempFile, "</tr>\n");
							}
							else {
								openLine = 1 ;
								columnType = 0 ;
							}
							fprintf(tempFile, "<tr>\n");
							fprintf(tempFile, "<th>") ;
							columnType = 0 ;	}							

<TABLE>%row				{	if(openLine == 1) {
								(columnType == 0 ? fprintf(tempFile, "</th>\n") : fprintf(tempFile, "</td>\n")) ;
								fprintf(tempFile, "</tr>\n");
							}
							else {
								openLine = 1 ;
								columnType = 1 ;
							}
							fprintf(tempFile, "<tr>\n");
							fprintf(tempFile, "<td>") ;
							columnType = 1 ;	}										

	/* ------------------------------ FECHAR TABELA ---------------------------------------------------------- */

<TABLE>%table%%		{	if(openLine == 1) {
							(columnType == 0 ? fprintf(tempFile, "</th>\n") : fprintf(tempFile, "</td>\n")) ;
							fprintf(tempFile, "</tr>\n");
							openLine = 0 ;
						}
						fprintf(tempFile, "</table>");
						BEGIN NO_ENV ;
						newLineEnable = 0 ;	}							
	

	/* ------------------------------ REGISTAR COLUNA DA TABELA ---------------------------------------------------------- */

<TABLE>%[ \t]+	{	(columnType == 0 ? fprintf(tempFile, "</th>\n") : fprintf(tempFile, "</td>\n"));	
					(columnType == 0 ? fprintf(tempFile, "<th>\n") : fprintf(tempFile, "<td>\n")) ;	}	

	/* -------------------------------- INÍCIO DO HEADER ------------------------------------------------------------------ */

<NO_ENV>%%header%			{	BEGIN HEADER;								
								beginHeaderHtml() ;	}

	/* -------------------------------- REGISTO DE TÍTULO, AUTOR E DATA --------------------------------------------------- */

<HEADER>%title 				{	if(openItem == 1) {
									endHeaderTag();
									tailInsertLinkedList(header, newLine);
								}
								else
									openItem = 1;
								beginHeaderLine("Title") ;	}

<HEADER>%author 			{	if(openItem == 1) {
									endHeaderTag();
									tailInsertLinkedList(header, newLine);
								}
								else
									openItem = 1;
								beginHeaderLine("Author") ;	}								

<HEADER>%date 				{	if(openItem == 1) {
									endHeaderTag();
									tailInsertLinkedList(header, newLine);
								}
								else
									openItem = 1;
								beginHeaderLine("Date") ;	}								

	/* -------------------------------- FINAL DO HEADER ------------------------------------------------------------------ */

<HEADER>%header%%		{		if(openItem == 1) {
									endHeaderTag();
									openItem = 0 ;
									tailInsertLinkedList(header, newLine);
								}	
								endHeaderHtml();
								BEGIN NO_ENV;
								newLineEnable = 0 ;	}

	/* -------------------------------- REGISTAR O HEADER ------------------------------------------------------------------ */

<HEADER>.			{	char *txt = substring(yytext, 0, 1) ;
						tailInsertLinkedList(header, txt);	}	

<HEADER>\n			{	}

	/* -------------------------------- IMPRIMIR A CAPA ------------------------------------------------------------------ */	

<NO_ENV>%cover%		{	createCoverHtml();
						newLineEnable = 0 ;	}

	/* -------------------------------- MARCAR O ÍNDICE ------------------------------------------------------------------ */	

<NO_ENV>%index%		{	markIndexHtml();
						printIndex = 1 ;
						newLineEnable = 0 ;	}

	/* -------------------------------- TRATAMENTO DE MUDANÇA DE LINHA ------------------------------------------------------------------ */							

<NO_ENV>. 				{	fprintf(tempFile, "%s", yytext);
							newLineEnable = 1 ;
							lastWasNewLine = 0 ;	}

<NO_ENV>\n 				{	if(newLineEnable == 1 && lastWasNewLine == 0)
								fprintf(tempFile, "<br>\n");
							lastWasNewLine = 1 ;	}

	/* -------------------------------- ACÇÃO POR DEFEITO ------------------------------------------------------------------ */							

.|\n 				{	fprintf(tempFile, "%s", yytext);	}

%%

void generateOutput () {	

	char line[DIM_LINE] ;
	char *indexMark = "%index%\n" ;
	int unfinishedLine = 0 ;

	if(printIndex == 1) {
		while(fgets(line, DIM_LINE, tempFile) != NULL) {
			if(unfinishedLine == 0 && strcmp(line, indexMark) == 0)
				makeIndexHtml();
			else
				fprintf(outputFile, "%s", line) ;
			if(strlen(line) == DIM_LINE-1 && line[DIM_LINE-1] != '\n')
				unfinishedLine = 1 ;
			else 
				unfinishedLine = 0 ;
			memset(line, '\0', DIM_LINE) ;
		}
	}
	else 
		while(fgets(line, DIM_LINE, tempFile) != NULL) {
			fprintf(outputFile, "%s", line) ;	
			memset(line, '\0', DIM_LINE) ;
		}
}


int main (int argc, char* argv[]) {

	/* Inicializa as estruturas */	
	closeTags = createLinkedList(NULL, NULL);
	indexHtml = createLinkedList(NULL, NULL);
	title = createLinkedList(NULL, NULL);
	header = createLinkedList(NULL, NULL);

	/* Define qual o output */
	if(argc > 1) {
		outputFile = fopen(argv[1], "w") ;
		if(outputFile == NULL) {
			fprintf(stderr, "Erro ao abrir, para escrita, o ficheiro %s\n", argv[1]) ;
			exit(-1) ;
		}	
	}
	else
		outputFile = stdout ;

	/* Abre o ficheiro temporario para escrita */
	tempFile = fopen(tempFileName, "w") ;	
	if(tempFile == NULL){
		fprintf(stderr, "Erro ao abrir, para escrita, o ficheiro %s\n", tempFileName) ;
		exit(-1) ;
	}
	
	/* Parser do ficheiro de entrada */
	beginHtml();
	yylex() ;	
	endHtml();

	/* Termina de escrever no ficheiro */
	fclose(tempFile) ;

	/* Abre o ficheiro temporário para leitura */	
	tempFile = fopen(tempFileName, "r") ;	
	if(tempFile == NULL){
		fprintf(stderr, "Erro ao abrir, para leitura, o ficheiro %s\n", tempFileName) ;
		exit(-1) ;
	}

	/* Gera o output */
	generateOutput() ;	

	/* Fecha ambos os ficheiros */
	fclose(outputFile) ;
	fclose(tempFile) ;

	/* Apaga o ficheiro temporário criado */
	remove(tempFileName);
	
	return 0 ;
}
